{"version":3,"sources":["Utils.tsx","Choosers.tsx","Storage.tsx","App.tsx","Stops.tsx","Schools.tsx","serviceWorker.ts","index.tsx"],"names":["DateUtils","Date","DeveloperUtils","URLSearchParams","window","location","search","get","DEVELOPER_QUERY_PARAM","IS_DEVELOPER_VALUE","timestamp","now","getTime","coords","FAKE_COORDINATES","accuracy","altitude","altitudeAccuracy","heading","latitude","longitude","speed","FAKE_RUN","school","name","routes","stops","route","leaders","start","arrivals","stop","position","LocationUtils","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","error","isDeveloper","fakePosition","POSITION_OPTIONS","maximumAge","timeout","enableHighAccuracy","RunPersistence","run","body","JSON","stringify","TableName","Item","school_route","fetch","ENDPOINT","method","mode","headers","TABLE_NAME","then","response","json","responseJSON","Items","items","map","item","catch","reason","console","log","parse","runs","previous","arrival","LeaderChooserMode","Storage","key","localStorage","getItem","value","setItem","SchoolChooser","schools","this","props","className","onClick","callback","React","Component","RouteChooser","LeaderChooser","LEADER_STORAGE_KEY","leader","put","cached","getCachedLeaderName","message","Add","prompt","cacheLeaderName","onButtonPress","AppMode","ArrivedStop","toISOString","NextStop","onArrival","PendingStop","SCHOOLS","initialState","WATCH","Array","App","state","listOpenRuns","onPreviousRuns","stopWatch","undefined","watch","setInterval","LEAD","setState","clearInterval","onLeaderAdded","emitRunUpdate","concat","leaderIndex","filter","_","index","here","length","end","options","type","blob","Blob","element","document","createElement","setAttribute","URL","createObjectURL","filename","style","display","appendChild","click","removeChild","download","i","join","toLocaleString","lastStop","onPreviousJoin","startWatch","onCreateNew","onSchoolChosen","onRouteChosen","First","onLeaderChosen","numLeaders","removeButton","onLeaderRemoved","elements","push","nextStop","onDownloadPressed","Boolean","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d5f98a33.chunk.js","sourcesContent":["import { RunModel } from './Models';\n\n/** Helper class to encapsulate Date methods */\nclass DateUtils {\n  /** Helper that returns the current date */\n  public static now(): Date {\n    return new Date();\n  }\n}\n\nclass DeveloperUtils {\n  static DEVELOPER_QUERY_PARAM: string = 'developer';\n  static IS_DEVELOPER_VALUE: string = '1';\n\n  static FAKE_COORDINATES: Coordinates = {\n    accuracy: 1,\n    altitude: 2,\n    altitudeAccuracy: 3,\n    heading: 4,\n    latitude: 5,\n    longitude: 6,\n    speed: 7\n  }\n\n  static FAKE_RUN: RunModel = {\n    school: {\n      name: 'Fake School',\n      routes: [{\n        name: 'Fake Route',\n        stops: [{\n          name: 'Fake Stop A'\n        }, {\n          name: 'Fake Stop B'\n        }]\n      }]\n    },\n    route: {\n      name: 'Fake Route',\n      stops: [{\n        name: 'Fake Stop A'\n      }, {\n        name: 'Fake Stop B'\n      }]\n    },\n    leaders: [{ name: 'me' }],\n    start: DateUtils.now(),\n    arrivals: [{\n      stop: {\n        name: 'Fake Stop A'\n      },\n      timestamp: DateUtils.now(),\n      position: {\n        coords: DeveloperUtils.FAKE_COORDINATES,\n        timestamp: DateUtils.now().getTime()\n      }\n    }]\n  }\n\n  public static isDeveloper(): boolean {\n    const developerValue: string = new URLSearchParams(window.location.search).get(DeveloperUtils.DEVELOPER_QUERY_PARAM) || '0';\n    return developerValue === DeveloperUtils.IS_DEVELOPER_VALUE;\n  }\n\n  public static fakePosition(): Position {\n    return { timestamp: DateUtils.now().getTime(), coords: DeveloperUtils.FAKE_COORDINATES};\n  }\n}\n\n/** Helper class to encapsulate Geolocation methods */\nclass LocationUtils {\n  static POSITION_OPTIONS: PositionOptions = {\n    maximumAge: 60 * 1000,\n    timeout: 5 * 1000,\n    enableHighAccuracy: true,\n  }\n\n  public static async getCurrentPosition(): Promise<Position> {\n    return new Promise<Position>( (resolve, reject) => {\n      window.navigator.geolocation.getCurrentPosition((position: Position) => {\n        resolve(position);\n      }, (error: PositionError) => {\n        if (DeveloperUtils.isDeveloper()) {\n          resolve(DeveloperUtils.fakePosition());\n        } else {\n          reject(error);\n        }\n      }, LocationUtils.POSITION_OPTIONS);\n    });\n  }\n}\n\nclass RunPersistence {\n  private static ENDPOINT: string = 'https://7098mtfhad.execute-api.us-west-2.amazonaws.com/Prod/WalkingSchoolBusRun';\n  private static TABLE_NAME: string = 'walking-school-bus-runs';\n\n  public static async emitRunUpdate(run: RunModel): Promise<Response> {\n    const body: string = JSON.stringify({\n      TableName: 'walking-school-bus-runs',\n      Item: {\n        school_route: run.school?.name + '_' + run.route?.name,\n        start: run.start,\n        run: run\n      }\n    });\n    return fetch(RunPersistence.ENDPOINT, {\n      method: 'POST',\n      body: body,\n      mode: 'cors',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });  \n  }\n\n  public static async listOpenRuns(): Promise<Array<RunModel>> {\n    return fetch(`${RunPersistence.ENDPOINT}?TableName=${RunPersistence.TABLE_NAME}`, {\n        method: 'GET',\n        mode: 'cors'\n      })\n      .then((response: Response) => response.json())\n      .then((responseJSON) => responseJSON.Items)\n      .then((items) => items.map((item: any) => item.run))\n      .catch((reason) => {\n        console.log('Catching listOpenRuns: ' + reason);\n        if (DeveloperUtils.isDeveloper()) {\n          return JSON.parse('[{\"mode\":0,\"route\":{\"name\":\"Jefferson\",\"stops\":[{\"name\":\"20th Ave and East Jefferson St\"},{\"name\":\"12th Ave and East Jefferson St\"},{\"name\":\"12th Ave and East Alder St\"},{\"name\":\"School\"}]},\"previous\":[],\"arrivals\":[{\"stop\":{\"name\":\"20th Ave and East Jefferson St\"},\"timestamp\":\"2020-02-12T08:29:57.044Z\",\"position\":{}}],\"school\":{\"name\":\"Bailey Gatzert\",\"routes\":[{\"name\":\"Jefferson\",\"stops\":[{\"name\":\"20th Ave and East Jefferson St\"},{\"name\":\"12th Ave and East Jefferson St\"},{\"name\":\"12th Ave and East Alder St\"},{\"name\":\"School\"}]},{\"name\":\"Yesler\",\"stops\":[{\"name\":\"19th Ave and East Yesler Way\"},{\"name\":\"17th Ave and East Yesler Way\"},{\"name\":\"15th Ave and East Yesler Way\"},{\"name\":\"School\"}]}]},\"start\":\"2020-02-12T08:29:54.289Z\",\"leaders\":[{\"name\":\"Dave\"}]},{\"mode\":0,\"route\":{\"name\":\"Jefferson\",\"stops\":[{\"name\":\"20th Ave and East Jefferson St\"},{\"name\":\"12th Ave and East Jefferson St\"},{\"name\":\"12th Ave and East Alder St\"},{\"name\":\"School\"}]},\"previous\":[],\"arrivals\":[],\"school\":{\"name\":\"Bailey Gatzert\",\"routes\":[{\"name\":\"Jefferson\",\"stops\":[{\"name\":\"20th Ave and East Jefferson St\"},{\"name\":\"12th Ave and East Jefferson St\"},{\"name\":\"12th Ave and East Alder St\"},{\"name\":\"School\"}]},{\"name\":\"Yesler\",\"stops\":[{\"name\":\"19th Ave and East Yesler Way\"},{\"name\":\"17th Ave and East Yesler Way\"},{\"name\":\"15th Ave and East Yesler Way\"},{\"name\":\"School\"}]}]},\"start\":\"2020-02-12T08:56:13.536Z\",\"leaders\":[{\"name\":\"Anonymous\"}]}]');\n          // return [DeveloperUtils.FAKE_RUN];\n        } else {\n          throw reason;\n        }    \n      })\n      .then((runs) => {\n        return runs.map((run: any) => {\n          console.log(JSON.stringify(run));\n          run.start = new Date(Date.parse(run.start));\n          run.previous = [];\n          run.arrivals = run.arrivals.map((arrival: any) => {\n            arrival.timestamp = new Date(Date.parse(arrival.timestamp));\n            return arrival;\n          })\n          return run;\n        });\n      });\n  }\n}\n\nexport {\n  DateUtils,\n  LocationUtils,\n  RunPersistence,\n}\n","import React from 'react';\nimport { SchoolModel, RouteModel } from './Models';\nimport Storage from './Storage';\n\n/** The tag properties for the SchoolChooser component */\ninterface SchoolChooserProps {\n  /** The schools for the user to choose from */\n  schools: Array<SchoolModel>\n\n  /** Callback invoked when a school is chosen */\n  callback: (school: SchoolModel) => Promise<any>\n}\n\n/** React component to allow a user to choose a School */\nclass SchoolChooser extends React.Component<SchoolChooserProps> {\n  render() {\n    const schools: Array<any> = this.props.schools.map((school) =>\n      (<div className=\"SchoolChooser-School\" key={school.name}>\n        <button onClick={() => this.props.callback(school)}>{school.name}</button>\n      </div>)\n    );\n    return (<div className=\"SchoolChooser\">\n      Choose a school:\n      <div className=\"SchoolChooser-Schools\">{schools}</div>\n    </div>);\n  }\n}\n\n/** The tag properties for the RouteChooser component */\ninterface RouteChooserProps {\n  /** The routes for the user to choose from */\n  routes: Array<RouteModel>\n\n  /** Callback invoked when a route is chosen */\n  callback: (route: RouteModel) => Promise<any>\n}\n\n/** React component to allow a user to choose a Route */\nclass RouteChooser extends React.Component<RouteChooserProps> {\n  render() {\n    const routes: Array<any> = this.props.routes.map((route)=>\n      (<div className=\"RouteChooser-Route\" key={route.name}>\n        <button onClick={() => this.props.callback(route)}>{route.name}</button>\n      </div>)\n    );\n    return (<div className=\"RouteChooser\">\n      Choose a route:\n      <div className=\"RouteChooser-Routes\">{routes}</div>\n    </div>);\n  }\n}\n\n/** Is the LeaderChooser component specifying the first leader, or adding one? */\nexport enum LeaderChooserMode {\n  First,\n  Add\n}\n\n/** The tag properties for the LeaderChooser component */\ninterface LeaderChooserProps {\n  /** The mode of the chooser, toggling the messages */\n  mode: LeaderChooserMode\n\n  /** Callback invoked when a leader is chosen */\n  callback: (leader: string) => Promise<any>\n}\n\n/** React component to allow a user to specify the leader name */\nclass LeaderChooser extends React.Component<LeaderChooserProps> {\n  static LEADER_STORAGE_KEY: string = 'leader';\n\n  private getCachedLeaderName(): string | null {\n    return Storage.get(LeaderChooser.LEADER_STORAGE_KEY);\n  }\n\n  private cacheLeaderName(leader: string): void {\n    Storage.put(LeaderChooser.LEADER_STORAGE_KEY, leader);\n  }\n\n  private async onButtonPress() {\n    const cached = this.getCachedLeaderName() || 'Anonymous';\n    let message: string = 'Who is leading the route?';\n    if (this.props.mode === LeaderChooserMode.Add) {\n      message = 'Who is joining as a leader?';\n    }\n    const leader = prompt(message, cached) || 'Anonymous';\n    if (leader !== 'Anonymous') {\n      this.cacheLeaderName(leader);\n    }\n    this.props.callback(leader);\n  }\n\n  render() {\n    let message: string = 'Start Route';\n    if (this.props.mode === LeaderChooserMode.Add) {\n      message = 'Add Leader';\n    }\n    return (<button onClick={() => this.onButtonPress()}>{message}</button>);\n  }\n}\n\nexport {\n  SchoolChooser,\n  RouteChooser,\n  LeaderChooser,\n}\n","/** Utility class to encapsulate short term storage */\nexport default class Storage {\n\n  /** Retrieve the value from storage for the key, or undefined if not present */\n  public static get(key: string): string | null {\n    return localStorage.getItem(key);\n  }\n\n  /** Save the value in storage under the provided key */\n  public static put(key: string, value: string): void {\n    localStorage.setItem(key, value);\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport { DateUtils, LocationUtils, RunPersistence } from './Utils';\n\nimport { SchoolModel, RouteModel, BusLeader, StopModel, RunModel, StopArrivalModel } from './Models';\nimport { SchoolChooser, RouteChooser, LeaderChooser, LeaderChooserMode } from './Choosers';\nimport { ArrivedStop, NextStop, PendingStop } from './Stops';\nimport SCHOOLS from './Schools';\n\ntype AppProps = {}\n\nenum AppMode {\n  LEAD, WATCH\n};\n\ntype AppState = RunModel & {\n  mode: AppMode,\n  previous: Array<RunModel>,\n  watch?: NodeJS.Timeout,\n};\n\nconst initialState = {\n  mode: AppMode.WATCH,\n  leaders: new Array<BusLeader>(),\n  arrivals: new Array<StopArrivalModel>(),\n  previous: new Array<RunModel>(),\n};\n\nexport default class App extends React.Component<AppProps, AppState> {\n  readonly state: AppState = initialState;\n\n  componentDidMount() {\n    RunPersistence.listOpenRuns().then((previous: Array<RunModel>) => this.onPreviousRuns(previous));\n  }\n\n  componentWillUnmount() {\n    this.stopWatch();\n  }\n\n  private startWatch() {\n    if (this.state.watch === undefined) {\n      const watch = setInterval( () => {\n        if (this.state.mode === AppMode.LEAD) {\n          this.stopWatch();\n        } else {\n          RunPersistence.listOpenRuns().then((previous: Array<RunModel>) => this.onPreviousRuns(previous));\n        }\n      }, 15 * 1000);\n      this.setState({ watch: watch });\n    }\n  }\n\n  private stopWatch() {\n    if (this.state.watch) {\n      clearInterval(this.state.watch);\n      this.setState({ watch: undefined });\n    }\n  }\n\n  private async onPreviousRuns(previous: Array<RunModel>) {\n    this.setState({ previous: previous });\n  }\n\n  private async onPreviousJoin(leader: string, run: RunModel) {\n    this.setState({ mode: AppMode.LEAD });\n    this.setState(run);\n    this.onLeaderAdded(leader);\n    this.stopWatch();\n  }\n\n  private async onCreateNew() {\n    this.setState({ mode: AppMode.LEAD });\n    this.stopWatch();\n  }\n\n  private get previous(): any {\n    let previous: any = this.state.previous.map((run, i) => {\n      console.log(JSON.stringify(run));\n      const leaders = run.leaders\n        .map((leader) => leader.name)\n        .join(', ');\n      const start = run.start?.toLocaleString();\n      const lastStop = run.arrivals[run.arrivals.length - 1]?.stop.name;\n      return (<div className=\"Previous-Run\" key={i + ''}>\n        <div className=\"Previous-Name\">{run.school?.name} - {run.route?.name}</div>\n        <div className=\"Previous-Start\">{start}</div>\n        <div className=\"Previous-Leaders\">{leaders}</div>\n        <div className=\"Previous-LastStop\">Last Stop: {lastStop}</div>\n        <div className=\"Previous-Buttons\">\n          <LeaderChooser mode={LeaderChooserMode.Add} callback={(leader:string) => this.onPreviousJoin(leader, run)}/> - <button onClick={() => this.startWatch()}>Watch</button>\n        </div>\n      </div>);\n    });\n    if (previous.length === 0) {\n      previous = 'None';\n    }\n    return (<div className=\"Previous\">\n        <div className=\"Previous-Runs\">\n          Open Runs: {previous}\n        </div>\n        <hr/>\n        <button onClick={() => this.onCreateNew()}>Create New Run</button>\n      </div>);\n  }\n\n  /** Async handler to record the school chosen in the run model */\n  private async onSchoolChosen(school: SchoolModel): Promise<any> {\n    this.setState({ school: school });\n  }\n\n  /** Convenience method, either renders the school chooser, or the chosen school */\n  private get school(): any {\n    if (!this.state.school) {\n      return (<SchoolChooser\n        schools={SCHOOLS}\n        callback={(school: SchoolModel) => this.onSchoolChosen(school)}\n        />);\n    }\n    return (<div className=\"Run-School\">School: {this.state.school.name}</div>);\n  }\n\n  /** Async handler to record the route chosen in the run model */\n  private async onRouteChosen(route: RouteModel): Promise<any> {\n    this.setState({ route: route });\n  }\n\n  /** Convenience method, either renders the route chooser for the school or the chosen route */\n  private get route(): any {\n    if (!this.state.school) {\n      return '';\n    } else if (!this.state.route) {\n      return (<RouteChooser\n        routes={this.state.school.routes}\n        callback={(route: RouteModel) => this.onRouteChosen(route)}\n        />);\n    }\n    return (<div className=\"Run-Route\">Route: {this.state.route.name}</div>);\n  }\n\n  /** Async handler to record that a leader has been specified, starting the run if necessary */\n  private async onLeaderChosen(leader: string): Promise<any> {\n    this.setState( {\n      leaders: [{ name: leader }],\n      start: new Date(),\n      mode: AppMode.LEAD,\n    }, () => RunPersistence.emitRunUpdate(this.state));\n  }\n\n  private async onLeaderAdded(leader: string): Promise<any> {\n    this.setState( (state, props) => {\n      return { leaders: state.leaders.concat({ name: leader }) };\n    }, () => RunPersistence.emitRunUpdate(this.state));\n\n  }\n\n  /** Async handler to remove a leader from the run */\n  private async onLeaderRemoved(leaderIndex: number): Promise<any> {\n    this.setState( (state, props) => {\n      return { leaders: state.leaders.filter((_, index) => index !== leaderIndex) };\n    }, () => RunPersistence.emitRunUpdate(this.state));\n  }\n\n  /** Convenience method, either renders the start route button or the current leader */\n  private get leader(): any {\n    if (!this.state.school || !this.state.route) {\n      return '';\n    } else if (this.state.leaders.length === 0) {\n      return (<LeaderChooser mode={LeaderChooserMode.First} callback={(leader:string) => this.onLeaderChosen(leader)}/>);\n    }\n    const numLeaders = this.state.leaders.length;\n    const leaders: Array<any> = this.state.leaders.map((leader, i) => {\n      let removeButton: any = '';\n      if (numLeaders > 1) {\n        const index = i;\n        removeButton = (<span>&nbsp;<button onClick={() => this.onLeaderRemoved(index)}>X</button></span>);\n      }\n      return (<div className=\"Run-Leader\" key={leader.name + i}>\n        {leader.name}\n        {removeButton}\n        </div>);\n    });\n    return (<div className=\"Run-Leaders\">\n      Leaders: {leaders}\n      <LeaderChooser mode={LeaderChooserMode.Add} callback={(leader:string) => this.onLeaderAdded(leader)}/>\n      </div>);\n  }\n\n  /** Convenience method, renders the start time of the run if it has started */\n  private get start(): any {\n    if (!this.state.start) {\n      return '';\n    }\n\n    return (<div className=\"Run-Start\">Start: {this.state.start.toLocaleString()}</div>);\n  }\n\n  /** Async handler, records an arrival at a stop in the run model */\n  private async onArrival(stop: StopModel): Promise<any> {\n    const here = await LocationUtils.getCurrentPosition();\n    this.setState( (state, props) => {\n      const now = DateUtils.now();\n      return {\n        arrivals: state.arrivals.concat({\n          stop: stop,\n          timestamp: now,\n          position: here,\n        })\n      };\n    }, () => {\n      if (this.state.route && this.state.arrivals.length === this.state.route.stops.length) {\n        this.setState({ end: DateUtils.now() }, () => RunPersistence.emitRunUpdate(this.state));\n      } else {\n        RunPersistence.emitRunUpdate(this.state);\n      }\n    });\n  }\n\n  /** Most of the magic is here, renders the different stops along the route with their current state */\n  private get stops(): any {\n    if (!this.state.route || !this.state.start) {\n      return '';\n    }\n    const elements: Array<any> = [];\n    // Loop through all stops that we've already arrived at\n    let i = 0;\n    for (; i < this.state.arrivals.length; i++) {\n      const arrival = this.state.arrivals[i];\n      elements.push((<ArrivedStop arrival={arrival} key={i + ''}/>));\n    }\n\n    // Render the next stop along the route\n    const nextStop = this.state.route.stops[i];\n    if (nextStop) {\n      elements.push((<NextStop stop={nextStop} onArrival={(stop: StopModel) => this.onArrival(stop)} key={i + ''}/>));\n      i++;\n    }\n\n    // Render any pending steps remaining in the route\n    while (i < this.state.route.stops.length) {\n      const stop = this.state.route.stops[i];\n      elements.push((<PendingStop stop={stop} key={i + ''}/>));\n      i++;\n    }\n    return elements;\n  }\n\n  /** Convenience method, renders the end time of the run, if any */\n  private get end(): any {\n    if (!this.state.end) {\n      return '';\n     }\n    return (<div className=\"Run-End\">End: {this.state.end.toLocaleString()}</div>);\n  }\n\n  /** Triggers a file download of the current run's data */\n  private async onDownloadPressed(): Promise<any> {\n    const options: BlobPropertyBag = { type: 'application/json' };\n    const blob: Blob = new Blob([JSON.stringify(this.state)], options);\n    const element = document.createElement('a');\n    element.setAttribute('href', window.URL.createObjectURL(blob));\n    const filename = this.state.school?.name + '-' + this.state.route?.name + '-' + this.state.start?.toISOString() + '.json';\n    element.setAttribute('download', filename);\n    element.style.display = 'none';\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n  }\n\n  /** Convenience method, renders a download button if the run is done */\n  private get download(): any {\n    if (!this.state.end) {\n      return '';\n    }\n\n    return (<button onClick={() => this.onDownloadPressed()}>Download Data</button>)\n  }\n\n  render() {\n    let body;\n    if (this.state.mode === AppMode.WATCH) {\n      body = this.previous;      \n    } else if (this.state.mode === AppMode.LEAD) {\n      body = (<div className=\"Run\">\n        {this.school}\n        {this.route}\n        {this.leader}\n        {this.start}\n        {this.stops}\n        {this.end}\n        {this.download}\n      </div>);\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Walking School Bus</p>\n        </header>\n        {body}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { StopModel, StopArrivalModel } from './Models';\n\ntype ArrivedStopParams = {\n  arrival: StopArrivalModel\n}\n\ntype StopParams = {\n  stop: StopModel\n}\n\ntype ArrivableStopParams = {\n  onArrival: (stop: StopModel) => Promise<any>\n}\n\n/** A react component to render a stop for which the school bus has already arrived */\nclass ArrivedStop extends React.Component<ArrivedStopParams> {\n  render() {\n    return (<div className=\"ArrivedStop\">\n        <div className=\"ArrivedStop-Header\">Arrived at Stop</div>\n        <div className=\"ArrivedStop-Name\">{this.props.arrival.stop.name}</div>\n        <div className=\"ArrivedStop-Timestamp\">{this.props.arrival.timestamp.toISOString()}</div>\n        <div className=\"ArrivedStop-Position\">Lat: {this.props.arrival.position.coords.latitude}, Lon: {this.props.arrival.position.coords.longitude}, Alt: {this.props.arrival.position.coords.altitude}</div>\n      </div>);\n  }\n}\n\n/** A react component to render the next stop along the route for a particular run */\nclass NextStop extends React.Component<StopParams & ArrivableStopParams> {\n  render() {\n    return (<div className=\"NextStop\">\n        <hr/>\n        <div className=\"NextStop-Header\">Next Stop</div>\n        <div className=\"NextStop-Name\">{this.props.stop.name}</div>\n        <div className=\"NextStop-Arrive\">\n          <button onClick={() => this.props.onArrival(this.props.stop)}>Arrive!</button>\n        </div>\n        <hr/>\n      </div>);\n  }\n}\n\n/** A react component to render a stop along the route that the bus has not yet reached (and is not next) */\nclass PendingStop extends React.Component<StopParams> {\n  render() {\n    return (<div className=\"PendingStop\">\n        <div className=\"PendingStop-Header\">Pending Stop</div>\n        <div className=\"PendingStop-Name\">{this.props.stop.name}</div>\n      </div>);\n  }\n}\n\nexport {\n  ArrivedStop,\n  NextStop,\n  PendingStop,\n}","import { SchoolModel } from './Models';\n\n/**\n * The current list of all schools, routes, and stops.\n *\n * TODO: This should probably be converted to some other datastore that\n *     can be managed independent of source control, perhaps keeping this\n *     as a set of defaults or test data.\n * TODO: Think about creating common objects for shared stops like 'School'\n */\nconst SCHOOLS: Array<SchoolModel> = [{\n  name: 'Bailey Gatzert',\n  routes: [\n    {\n      name: 'Jefferson',\n      stops: [\n        { name: '20th Ave and East Jefferson St' },\n        { name: '12th Ave and East Jefferson St' },\n        { name: '12th Ave and East Alder St' },\n        { name: 'School' },\n      ]\n    },\n    {\n      name: 'Yesler',\n      stops: [\n        { name: '19th Ave and East Yesler Way' },\n        { name: '17th Ave and East Yesler Way' },\n        { name: '15th Ave and East Yesler Way' },\n        { name: 'School' },\n      ]\n    }\n  ]\n}];\n\nexport default SCHOOLS;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}