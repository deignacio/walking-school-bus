{"version":3,"sources":["Utils.tsx","Choosers.tsx","Storage.tsx","Stops.tsx","Schools.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DateUtils","Date","DeveloperUtils","URLSearchParams","window","location","search","get","DEVELOPER_QUERY_PARAM","IS_DEVELOPER_VALUE","timestamp","now","getTime","coords","FAKE_COORDINATES","accuracy","altitude","altitudeAccuracy","heading","latitude","longitude","speed","LocationUtils","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","error","isDeveloper","fakePosition","POSITION_OPTIONS","maximumAge","timeout","enableHighAccuracy","LeaderChooserMode","Storage","key","localStorage","getItem","value","setItem","run","body","JSON","stringify","TableName","Item","school_route","school","name","route","start","fetch","method","SchoolChooser","schools","this","props","map","className","onClick","callback","React","Component","RouteChooser","routes","LeaderChooser","LEADER_STORAGE_KEY","leader","put","cached","getCachedLeaderName","message","mode","Add","prompt","cacheLeaderName","onButtonPress","ArrivedStop","arrival","stop","toISOString","NextStop","onArrival","PendingStop","SCHOOLS","stops","App","model","state","arrivals","leaders","setState","push","emit","leaderIndex","filter","_","index","here","length","end","options","type","blob","Blob","element","document","createElement","setAttribute","URL","createObjectURL","filename","style","display","appendChild","click","removeChild","download","onSchoolChosen","onRouteChosen","First","onLeaderChosen","numLeaders","i","removeButton","onLeaderRemoved","elements","nextStop","onDownloadPressed","Boolean","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e155a83.chunk.js","sourcesContent":["/** Helper class to encapsulate Date methods */\nclass DateUtils {\n  /** Helper that returns the current date */\n  public static now(): Date {\n    return new Date();\n  }\n}\n\nclass DeveloperUtils {\n  static DEVELOPER_QUERY_PARAM: string = 'developer';\n  static IS_DEVELOPER_VALUE: string = '1';\n\n  static FAKE_COORDINATES: Coordinates = {\n    accuracy: 1,\n    altitude: 2,\n    altitudeAccuracy: 3,\n    heading: 4,\n    latitude: 5,\n    longitude: 6,\n    speed: 7\n  }\n\n  public static isDeveloper(): boolean {\n    const developerValue: string = new URLSearchParams(window.location.search).get(DeveloperUtils.DEVELOPER_QUERY_PARAM) || '0';\n    return developerValue === DeveloperUtils.IS_DEVELOPER_VALUE;\n  }\n\n  public static fakePosition(): Position {\n    return { timestamp: DateUtils.now().getTime(), coords: DeveloperUtils.FAKE_COORDINATES};\n  }\n}\n\n/** Helper class to encapsulate Geolocation methods */\nclass LocationUtils {\n  static POSITION_OPTIONS: PositionOptions = {\n    maximumAge: 60 * 1000,\n    timeout: 5 * 1000,\n    enableHighAccuracy: true,\n  }\n\n  public static async getCurrentPosition(): Promise<Position> {\n    return new Promise<Position>( (resolve, reject) => {\n      window.navigator.geolocation.getCurrentPosition((position: Position) => {\n        resolve(position);\n      }, (error: PositionError) => {\n        const isDeveloper = DeveloperUtils.isDeveloper();\n        if (isDeveloper) {\n          resolve(DeveloperUtils.fakePosition());\n        } else {\n          reject(error);\n        }\n      }, LocationUtils.POSITION_OPTIONS);\n    });\n  }\n}\n\nexport {\n  DateUtils,\n  LocationUtils\n}\n","import React from 'react';\nimport { SchoolModel, RouteModel } from './Models';\nimport Storage from './Storage';\n\n/** The tag properties for the SchoolChooser component */\ninterface SchoolChooserProps {\n  /** The schools for the user to choose from */\n  schools: Array<SchoolModel>\n\n  /** Callback invoked when a school is chosen */\n  callback: (school: SchoolModel) => Promise<any>\n}\n\n/** React component to allow a user to choose a School */\nclass SchoolChooser extends React.Component<SchoolChooserProps> {\n  render() {\n    const schools: Array<any> = this.props.schools.map((school) =>\n      (<div className=\"SchoolChooser-School\" key={school.name}>\n        <button onClick={() => this.props.callback(school)}>{school.name}</button>\n      </div>)\n    );\n    return (<div className=\"SchoolChooser\">\n      Choose a school:\n      <div className=\"SchoolChooser-Schools\">{schools}</div>\n    </div>);\n  }\n}\n\n/** The tag properties for the RouteChooser component */\ninterface RouteChooserProps {\n  /** The routes for the user to choose from */\n  routes: Array<RouteModel>\n\n  /** Callback invoked when a route is chosen */\n  callback: (route: RouteModel) => Promise<any>\n}\n\n/** React component to allow a user to choose a Route */\nclass RouteChooser extends React.Component<RouteChooserProps> {\n  render() {\n    const routes: Array<any> = this.props.routes.map((route)=>\n      (<div className=\"RouteChooser-Route\" key={route.name}>\n        <button onClick={() => this.props.callback(route)}>{route.name}</button>\n      </div>)\n    );\n    return (<div className=\"RouteChooser\">\n      Choose a route:\n      <div className=\"RouteChooser-Routes\">{routes}</div>\n    </div>);\n  }\n}\n\n/** Is the LeaderChooser component specifying the first leader, or adding one? */\nexport enum LeaderChooserMode {\n  First,\n  Add\n}\n\n/** The tag properties for the LeaderChooser component */\ninterface LeaderChooserProps {\n  /** The mode of the chooser, toggling the messages */\n  mode: LeaderChooserMode\n\n  /** Callback invoked when a leader is chosen */\n  callback: (leader: string) => Promise<any>\n}\n\n/** React component to allow a user to specify the leader name */\nclass LeaderChooser extends React.Component<LeaderChooserProps> {\n  static LEADER_STORAGE_KEY: string = 'leader';\n\n  private getCachedLeaderName(): string | null {\n    return Storage.get(LeaderChooser.LEADER_STORAGE_KEY);\n  }\n\n  private cacheLeaderName(leader: string): void {\n    Storage.put(LeaderChooser.LEADER_STORAGE_KEY, leader);\n  }\n\n  private async onButtonPress() {\n    const cached = this.getCachedLeaderName() || 'Anonymous';\n    let message: string = 'Who is leading the route?';\n    if (this.props.mode === LeaderChooserMode.Add) {\n      message = 'Who is joining as a leader?';\n    }\n    const leader = prompt(message, cached) || 'Anonymous';\n    if (leader !== 'Anonymous') {\n      this.cacheLeaderName(leader);\n    }\n    this.props.callback(leader);\n  }\n\n  render() {\n    let message: string = 'Start Route';\n    if (this.props.mode === LeaderChooserMode.Add) {\n      message = 'Add Leader';\n    }\n    return (<button onClick={() => this.onButtonPress()}>{message}</button>);\n  }\n}\n\nexport {\n  SchoolChooser,\n  RouteChooser,\n  LeaderChooser,\n}\n","import { RunModel } from './Models';\n\n/** Utility class to encapsulate short term storage */\nexport default class Storage {\n\n  /** Retrieve the value from storage for the key, or undefined if not present */\n  public static get(key: string): string | null {\n    return localStorage.getItem(key);\n  }\n\n  /** Save the value in storage under the provided key */\n  public static put(key: string, value: string): void {\n    localStorage.setItem(key, value);\n  }\n\n  public static async emit(run: RunModel): Promise<Response> {\n    const body: string = JSON.stringify({\n      TableName: 'walking-school-bus-runs',\n      Item: {\n        school_route: run.school?.name + '_' + run.route?.name,\n        start: run.start,\n        run: run\n      }\n    });\n    return fetch('https://7098mtfhad.execute-api.us-west-2.amazonaws.com/Prod/WalkingSchoolBusRun', {\n      method: 'POST',\n      body: body,\n    });\n  }\n}\n","import React from 'react';\nimport { StopModel, StopArrivalModel } from './Models';\n\ntype ArrivedStopParams = {\n  arrival: StopArrivalModel\n}\n\ntype StopParams = {\n  stop: StopModel\n}\n\ntype ArrivableStopParams = {\n  onArrival: (stop: StopModel) => Promise<any>\n}\n\n/** A react component to render a stop for which the school bus has already arrived */\nclass ArrivedStop extends React.Component<ArrivedStopParams> {\n  render() {\n    return (<div className=\"ArrivedStop\">\n        <div className=\"ArrivedStop-Header\">Arrived at Stop</div>\n        <div className=\"ArrivedStop-Name\">{this.props.arrival.stop.name}</div>\n        <div className=\"ArrivedStop-Timestamp\">{this.props.arrival.timestamp.toISOString()}</div>\n        <div className=\"ArrivedStop-Position\">Lat: {this.props.arrival.position.coords.latitude}, Lon: {this.props.arrival.position.coords.longitude}, Alt: {this.props.arrival.position.coords.altitude}</div>\n      </div>);\n  }\n}\n\n/** A react component to render the next stop along the route for a particular run */\nclass NextStop extends React.Component<StopParams & ArrivableStopParams> {\n  render() {\n    return (<div className=\"NextStop\">\n        <hr/>\n        <div className=\"NextStop-Header\">Next Stop</div>\n        <div className=\"NextStop-Name\">{this.props.stop.name}</div>\n        <div className=\"NextStop-Arrive\">\n          <button onClick={() => this.props.onArrival(this.props.stop)}>Arrive!</button>\n        </div>\n        <hr/>\n      </div>);\n  }\n}\n\n/** A react component to render a stop along the route that the bus has not yet reached (and is not next) */\nclass PendingStop extends React.Component<StopParams> {\n  render() {\n    return (<div className=\"PendingStop\">\n        <div className=\"PendingStop-Header\">Pending Stop</div>\n        <div className=\"PendingStop-Name\">{this.props.stop.name}</div>\n      </div>);\n  }\n}\n\nexport {\n  ArrivedStop,\n  NextStop,\n  PendingStop,\n}","import { SchoolModel } from './Models';\n\n/**\n * The current list of all schools, routes, and stops.\n *\n * TODO: This should probably be converted to some other datastore that\n *     can be managed independent of source control, perhaps keeping this\n *     as a set of defaults or test data.\n * TODO: Think about creating common objects for shared stops like 'School'\n */\nconst SCHOOLS: Array<SchoolModel> = [{\n  name: 'Bailey Gatzert',\n  routes: [\n    {\n      name: 'Jefferson',\n      stops: [\n        { name: '20th Ave and East Jefferson St' },\n        { name: '12th Ave and East Jefferson St' },\n        { name: '12th Ave and East Alder St' },\n        { name: 'School' },\n      ]\n    },\n    {\n      name: 'Yesler',\n      stops: [\n        { name: '19th Ave and East Yesler Way' },\n        { name: '17th Ave and East Yesler Way' },\n        { name: '15th Ave and East Yesler Way' },\n        { name: 'School' },\n      ]\n    }\n  ]\n}];\n\nexport default SCHOOLS;","import React from 'react';\nimport './App.css';\nimport { DateUtils, LocationUtils } from './Utils';\n\nimport { SchoolModel, RouteModel, StopModel, RunModel } from './Models';\nimport { SchoolChooser, RouteChooser, LeaderChooser, LeaderChooserMode } from './Choosers';\nimport { ArrivedStop, NextStop, PendingStop } from './Stops';\nimport Storage from './Storage';\nimport SCHOOLS from './Schools';\n\ntype AppProps = {}\n\ntype AppModel = {\n  run: RunModel\n}\n\nexport default class App extends React.Component<AppProps, AppModel> {\n\n  constructor(props: AppProps, model: AppModel) {\n    super(props, model)\n\n    this.state = { run: { arrivals: [], leaders: [] } };\n  }\n\n  /** Async handler to record the school chosen in the run model */\n  private async onSchoolChosen(school: SchoolModel): Promise<any> {\n    this.setState( (state, props) => {\n      state.run.school = school;\n      return state;\n    });\n  }\n\n  /** Convenience method, either renders the school chooser, or the chosen school */\n  private get school(): any {\n    if (!this.state.run.school) {\n      return (<SchoolChooser\n        schools={SCHOOLS}\n        callback={(school: SchoolModel) => this.onSchoolChosen(school)}\n        />);\n    }\n    return (<div className=\"Run-School\">School: {this.state.run.school.name}</div>);\n  }\n\n  /** Async handler to record the route chosen in the run model */\n  private async onRouteChosen(route: RouteModel): Promise<any> {\n    this.setState( (state, props) => {\n      state.run.route = route;\n      return state;\n    });\n  }\n\n  /** Convenience method, either renders the route chooser for the school or the chosen route */\n  private get route(): any {\n    if (!this.state.run.school) {\n      return '';\n    } else if (!this.state.run.route) {\n      return (<RouteChooser\n        routes={this.state.run.school.routes}\n        callback={(route: RouteModel) => this.onRouteChosen(route)}\n        />);\n    }\n    return (<div className=\"Run-Route\">Route: {this.state.run.route.name}</div>);\n  }\n\n  /** Async handler to record that a leader has been specified, starting the run if necessary */\n  private async onLeaderChosen(leader: string): Promise<any> {\n    this.setState( (state, props) => {\n      state.run.leaders.push({ name: leader });\n      if (!state.run.start) {\n        state.run.start = new Date();\n      }\n      Storage.emit(state.run);\n      return state;\n    });\n  }\n\n  /** Async handler to remove a leader from the run */\n  private async onLeaderRemoved(leaderIndex: number): Promise<any> {\n    this.setState( (state, props) => {\n      state.run.leaders = state.run.leaders.filter((_, index) => index !== leaderIndex);\n      Storage.emit(state.run);\n      return state;\n    });\n  }\n\n  /** Convenience method, either renders the start route button or the current leader */\n  private get leader(): any {\n    if (!this.state.run.school || !this.state.run.route) {\n      return '';\n    } else if (this.state.run.leaders.length === 0) {\n      return (<LeaderChooser mode={LeaderChooserMode.First} callback={(leader:string) => this.onLeaderChosen(leader)}/>);\n    }\n    const numLeaders = this.state.run.leaders.length;\n    const leaders: Array<any> = this.state.run.leaders.map((leader, i) => {\n      let removeButton: any = '';\n      if (numLeaders > 1) {\n        const index = i;\n        removeButton = (<span>&nbsp;<button onClick={() => this.onLeaderRemoved(index)}>X</button></span>);\n      }\n      return (<div className=\"Run-Leader\" key={leader.name + i}>\n        {leader.name}\n        {removeButton}\n        </div>);\n    });\n    return (<div className=\"Run-Leaders\">\n      Leaders: {leaders}\n      <LeaderChooser mode={LeaderChooserMode.Add} callback={(leader:string) => this.onLeaderChosen(leader)}/>\n      </div>);\n  }\n\n  /** Convenience method, renders the start time of the run if it has started */\n  private get start(): any {\n    if (!this.state.run.start) {\n      return '';\n    }\n\n    return (<div className=\"Run-Start\">Start: {this.state.run.start.toISOString()}</div>);\n  }\n\n  /** Async handler, records an arrival at a stop in the run model */\n  private async onArrival(stop: StopModel): Promise<any> {\n    const here = await LocationUtils.getCurrentPosition();\n    this.setState( (state, props) => {\n      const now = DateUtils.now();\n      state.run.arrivals.push({\n        stop: stop,\n        timestamp: now,\n        position: here,\n      });\n      if (state.run.route && state.run.arrivals.length === state.run.route.stops.length) {\n        state.run.end = now;\n      }\n      Storage.emit(state.run);\n      return state;\n    });\n  }\n\n  /** Most of the magic is here, renders the different stops along the route with their current state */\n  private get stops(): any {\n    if (!this.state.run.route || !this.state.run.start) {\n      return '';\n    }\n    const elements: Array<any> = [];\n    // Loop through all stops that we've already arrived at\n    let i = 0;\n    for (; i < this.state.run.arrivals.length; i++) {\n      const arrival = this.state.run.arrivals[i];\n      elements.push((<ArrivedStop arrival={arrival} key={i + ''}/>));\n    }\n\n    // Render the next stop along the route\n    const nextStop = this.state.run.route.stops[i];\n    if (nextStop) {\n      elements.push((<NextStop stop={nextStop} onArrival={(stop: StopModel) => this.onArrival(stop)} key={i + ''}/>));\n      i++;\n    }\n\n    // Render any pending steps remaining in the route\n    while (i < this.state.run.route.stops.length) {\n      const stop = this.state.run.route.stops[i];\n      elements.push((<PendingStop stop={stop} key={i + ''}/>));\n      i++;\n    }\n    return elements;\n  }\n\n  /** Convenience method, renders the end time of the run, if any */\n  private get end(): any {\n    if (!this.state.run.end) {\n      return '';\n     }\n    return (<div className=\"Run-End\">End: {this.state.run.end.toISOString()}</div>);\n  }\n\n  /** Triggers a file download of the current run's data */\n  private async onDownloadPressed(): Promise<any> {\n    const options: BlobPropertyBag = { type: 'application/json' };\n    const blob: Blob = new Blob([JSON.stringify(this.state.run)], options);\n    const element = document.createElement('a');\n    element.setAttribute('href', window.URL.createObjectURL(blob));\n    const filename = this.state.run.school?.name + '-' + this.state.run.route?.name + '-' + this.state.run.start?.toISOString + '.json';\n    element.setAttribute('download', filename);\n    element.style.display = 'none';\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n  }\n\n  /** Convenience method, renders a download button if the run is done */\n  private get download(): any {\n    if (!this.state.run.end) {\n      return '';\n    }\n\n    return (<button onClick={() => this.onDownloadPressed()}>Download Data</button>)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Walking School Bus</p>\n        </header>\n        <div className=\"Run\">\n          {this.school}\n          {this.route}\n          {this.leader}\n          {this.start}\n          {this.stops}\n          {this.end}\n          {this.download}\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}