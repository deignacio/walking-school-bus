{"version":3,"sources":["Utils.tsx","Choosers.tsx","Stops.tsx","Schools.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Utils","Date","SchoolChooser","schools","this","props","map","school","className","key","name","onClick","callback","React","Component","RouteChooser","routes","route","ArrivedStop","arrival","stop","timestamp","toISOString","NextStop","onArrival","PendingStop","SCHOOLS","stops","App","model","state","run","arrivals","leaders","setState","leader","prompt","start","now","push","length","end","onSchoolChosen","onRouteChosen","onStartRoute","i","elements","nextStop","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16332540.chunk.js","sourcesContent":["/** Helper class to encapsulate testable methods */\nexport default class Utils {\n  /** Helper that returns the current date */\n  public static now(): Date {\n    return new Date();\n  }\n}","import React from 'react';\nimport { SchoolModel, RouteModel } from './Models';\n\n/** The tag properties for the SchoolChooser component */\ninterface SchoolChooserProps {\n  /** The schools for the user to choose from */\n  schools: Array<SchoolModel>\n\n  /** Callback invoked when a school is chosen */\n  callback: (school: SchoolModel) => Promise<any>\n}\n\n/** React component to allow a user to choose a School */\nclass SchoolChooser extends React.Component<SchoolChooserProps> {\n  render() {\n    const schools: Array<any> = this.props.schools.map((school) =>\n      (<div className=\"SchoolChooser-School\" key={school.name}>\n        <button onClick={() => this.props.callback(school)}>{school.name}</button>\n      </div>)\n    );\n    return (<div className=\"SchoolChooser\">\n      Choose a school:\n      <div className=\"SchoolChooser-Schools\">{schools}</div>\n    </div>);\n  }\n}\n\n/** The tag properties for the RouteChooser component */\ninterface RouteChooserProps {\n  /** The routes for the user to choose from */\n  routes: Array<RouteModel>\n\n  /** Callback invoked when a route is chosen */\n  callback: (route: RouteModel) => Promise<any>\n}\n\n/** React component to allow a user to choose a Route */\nclass RouteChooser extends React.Component<RouteChooserProps> {\n  render() {\n    const routes: Array<any> = this.props.routes.map((route)=>\n      (<div className=\"RouteChooser-Route\" key={route.name}>\n        <button onClick={() => this.props.callback(route)}>{route.name}</button>\n      </div>)\n    );\n    return (<div className=\"RouteChooser\">\n      Choose a route:\n      <div className=\"RouteChooser-Routes\">{routes}</div>\n    </div>);\n  }\n}\n\nexport {\n  SchoolChooser,\n  RouteChooser,\n}","import React from 'react';\nimport { StopModel, StopArrivalModel } from './Models';\n\ntype ArrivedStopParams = {\n  arrival: StopArrivalModel\n}\n\ntype StopParams = {\n  stop: StopModel\n}\n\ntype ArrivableStopParams = {\n  onArrival: (stop: StopModel) => Promise<any>\n}\n\n/** A react component to render a stop for which the school bus has already arrived */\nclass ArrivedStop extends React.Component<ArrivedStopParams> {\n  render() {\n    return (<div className=\"ArrivedStop\">\n        <div className=\"ArrivedStop-Header\">Arrived at Stop</div>\n        <div className=\"ArrivedStop-Name\">{this.props.arrival.stop.name}</div>\n        <div className=\"ArrivedStop-Timestamp\">{this.props.arrival.timestamp.toISOString()}</div>\n      </div>);\n  }\n}\n\n/** A react component to render the next stop along the route for a particular run */\nclass NextStop extends React.Component<StopParams & ArrivableStopParams> {\n  render() {\n    return (<div className=\"NextStop\">\n        <hr/>\n        <div className=\"NextStop-Header\">Next Stop</div>\n        <div className=\"NextStop-Name\">{this.props.stop.name}</div>\n        <div className=\"NextStop-Arrive\">\n          <button onClick={() => this.props.onArrival(this.props.stop)}>Arrive!</button>\n        </div>\n        <hr/>\n      </div>);\n  }\n}\n\n/** A react component to render a stop along the route that the bus has not yet reached (and is not next) */\nclass PendingStop extends React.Component<StopParams> {\n  render() {\n    return (<div className=\"PendingStop\">\n        <div className=\"PendingStop-Header\">Pending Stop</div>\n        <div className=\"PendingStop-Name\">{this.props.stop.name}</div>\n      </div>);\n  }\n}\n\nexport {\n  ArrivedStop,\n  NextStop,\n  PendingStop,\n}","import { SchoolModel } from './Models';\n\n/**\n * The current list of all schools, routes, and stops.\n *\n * TODO: This should probably be converted to some other datastore that\n *     can be managed independent of source control, perhaps keeping this\n *     as a set of defaults or test data.\n * TODO: Think about creating common objects for shared stops like 'School'\n */\nconst SCHOOLS: Array<SchoolModel> = [{\n  name: 'Bailey Gatzert',\n  routes: [\n    {\n      name: 'Jefferson',\n      stops: [\n        { name: '20th Ave and East Jefferson St' },\n        { name: '12th Ave and East Jefferson St' },\n        { name: '12th Ave and East Alder St' },\n        { name: 'School' },\n      ]\n    },\n    {\n      name: 'Yesler',\n      stops: [\n        { name: '19th Ave and East Yesler Way' },\n        { name: '17th Ave and East Yesler Way' },\n        { name: '15th Ave and East Yesler Way' },\n        { name: 'School' },\n      ]\n    }\n  ]\n}];\n\nexport default SCHOOLS;","import React from 'react';\nimport './App.css';\nimport Utils from './Utils';\n\nimport { SchoolModel, RouteModel, StopModel, RunModel } from './Models';\nimport { SchoolChooser, RouteChooser } from './Choosers';\nimport { ArrivedStop, NextStop, PendingStop } from './Stops';\nimport SCHOOLS from './Schools';\n\ntype AppProps = {}\n\ntype AppModel = {\n  run: RunModel\n}\n\nexport default class App extends React.Component<AppProps, AppModel> {\n\n  constructor(props: AppProps, model: AppModel) {\n    super(props, model)\n\n    this.state = { run: { arrivals: [], leaders: [] } };\n  }\n\n  /** Async handler to record the school chosen in the run model */\n  private async onSchoolChosen(school: SchoolModel): Promise<any> {\n    this.setState( (state, props) => {\n      state.run.school = school;\n      return state;\n    });\n  }\n\n  /** Convenience method, either renders the school chooser, or the chosen school */\n  private get school(): any {\n    if (!this.state.run.school) {\n      return (<SchoolChooser\n        schools={SCHOOLS}\n        callback={(school: SchoolModel) => this.onSchoolChosen(school)}\n        />);\n    }\n    return (<div className=\"Run-School\">School: {this.state.run.school.name}</div>);\n  }\n\n  /** Async handler to record the route chosen in the run model */\n  private async onRouteChosen(route: RouteModel): Promise<any> {\n    this.setState( (state, props) => {\n      state.run.route = route;\n      return state;\n    });\n  }\n\n  /** Convenience method, either renders the route chooser for the school or the chosen route */\n  private get route(): any {\n    if (!this.state.run.school) {\n      return '';\n    } else if (!this.state.run.route) {\n      return (<RouteChooser\n        routes={this.state.run.school.routes}\n        callback={(route: RouteModel) => this.onRouteChosen(route)}\n        />);\n    }\n    return (<div className=\"Run-Route\">Route: {this.state.run.route.name}</div>);\n  }\n\n  /** Async handler to record that the route has been started by a particular leader */\n  private async onStartRoute(): Promise<any> {\n    const leader: string = prompt('Leader name:') || 'Anonymous leader';\n    this.setState( (state, props) => {\n      state.run.leaders = [{ name: leader }];\n      state.run.start = new Date();\n      return state;\n    });\n  }\n\n  /** Convenience method, either renders the start route button or the current leader */\n  private get leader(): any {\n    if (!this.state.run.school || !this.state.run.route) {\n      return '';\n    } else if (this.state.run.leaders.length === 0) {\n      return (<button onClick={() => this.onStartRoute()}>Start Route</button>);\n    }\n    const leaders: Array<any> = this.state.run.leaders.map((leader, i) => (\n      <div className=\"Run-Leader\" key={leader.name + i}>{leader.name}</div>\n    ));\n    return (<div className=\"Run-Leaders\">Leaders: {leaders}</div>);\n  }\n\n  /** Convenience method, renders the start time of the run if it has started */\n  private get start(): any {\n    if (!this.state.run.start) {\n      return '';\n    }\n\n    return (<div className=\"Run-Start\">Start: {this.state.run.start.toISOString()}</div>);\n  }\n\n  /** Async handler, records an arrival at a stop in the run model */\n  private async onArrival(stop: StopModel): Promise<any> {\n    this.setState( (state, props) => {\n      const now = Utils.now();\n      state.run.arrivals.push({\n        stop: stop,\n        timestamp: now,\n      });\n      if (state.run.route && state.run.arrivals.length === state.run.route.stops.length) {\n        state.run.end = now;\n      }\n      return state;\n    });\n  }\n\n  /** Most of the magic is here, renders the different stops along the route with their current state */\n  private get stops(): any {\n    if (!this.state.run.route || !this.state.run.start) {\n      return '';\n    }\n    const elements: Array<any> = [];\n    // Loop through all stops that we've already arrived at\n    let i = 0;\n    for (; i < this.state.run.arrivals.length; i++) {\n      const arrival = this.state.run.arrivals[i];\n      elements.push((<ArrivedStop arrival={arrival} />));\n    }\n\n    // Render the next stop along the route\n    const nextStop = this.state.run.route.stops[i];\n    if (nextStop) {\n      elements.push((<NextStop stop={nextStop} onArrival={(stop: StopModel) => this.onArrival(stop)} />));\n      i++;\n    }\n\n    // Render any pending steps remaining in the route\n    while (i < this.state.run.route.stops.length) {\n      const stop = this.state.run.route.stops[i];\n      elements.push((<PendingStop stop={stop} />));\n      i++;\n    }\n    return elements;\n  }\n\n  /** Convenience method, renders the end time of the run, if any */\n  private get end(): any {\n    if (!this.state.run.end) {\n      return '';\n     }\n    return (<div className=\"Run-End\">End: {this.state.run.end.toISOString()}</div>);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Walking School Bus</p>\n        </header>\n        <div className=\"Run\">\n          {this.school}\n          {this.route}\n          {this.leader}\n          {this.start}\n          {this.stops}\n          {this.end}\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}